

struct BaseLight {
vec3 color;
float intensity;
};

struct DirectionalLight {
BaseLight base;
vec3 direction;
};




struct PointLight {
BaseLight base;

float constant;
float linear;
float exponent;


vec3 position;
float range;
};

struct SpotLight {
PointLight pointLight;
vec3 direction;
float cutoff;
};



vec4 caclLight(BaseLight base, vec3 direction, vec3 normal, vec3 worldPos, vec3 eyePos, float specularIntensity, float specularPower){
	
	float diffuseFactor = dot(normal, -direction);
	vec4 diffuseColor = vec4(0,0,0,0);
	
	vec4 specularColor = vec4(0,0,0,0);
	
	if(diffuseFactor > 0){
		diffuseColor = vec4(base.color, 1.0) * base.intensity * diffuseFactor;
		
		vec3 directionToEye = normalize(eyePos - worldPos);
		//vec3 reflectDirection = normalize(reflect(direction, normal));
		vec3 halfDirection = normalize(directionToEye - direction);
		
		float specularFactor = dot(halfDirection, normal);
		//float specularFactor = dot(directionToEye, reflectDirection);
		specularFactor = pow(specularFactor, specularPower);
		
	
		if(specularFactor > 0){
			specularColor = vec4(base.color, 1.0) * specularIntensity * specularFactor;
			//return vec4(1,0,0,1);
		}
	
	
	
	}

	return diffuseColor + specularColor;
}



vec4 caclDirectionalLight(DirectionalLight light, vec3 normal, vec3 worldPos, vec3 eyePos, float specularIntensity, float specularPower) {
	return caclLight(light.base, -light.direction, normal, worldPos, eyePos, specularIntensity, specularPower);
}




vec4 caclPointLight(PointLight pointLight, vec3 normal, vec3 worldPos, vec3 eyePos, float specularIntensity, float specularPower) {
	  vec3 lightDirection = worldPos - pointLight.position;
    float distanceToPoint = length(lightDirection);
	if(distanceToPoint > pointLight.range){
	return vec4(0,0,0,0);
	}


   lightDirection = normalize(lightDirection);
    
    vec4 color = caclLight(pointLight.base, lightDirection, normal, worldPos, eyePos, specularIntensity, specularPower);
    
    float attenuation = pointLight.constant +
                         pointLight.linear * distanceToPoint +
                         pointLight.exponent * distanceToPoint * distanceToPoint +
                         0.0001;
                         
    return color / attenuation;
}








vec4 caclSpotLight(SpotLight spotLight, vec3 normal, vec3 worldPos, vec3 eyePos, float specularIntensity, float specularPower) {

	vec3 lightDirection = normalize(worldPos - spotLight.pointLight.position);
	float spotFactor = dot(lightDirection, spotLight.direction);
	
	vec4 color = vec4(0,0,0,0);
	
	if(spotFactor > spotLight.cutoff){
		color = caclPointLight(spotLight.pointLight, normal, worldPos, eyePos, specularIntensity, specularPower) * 
		(1.0 - (1.0 - spotFactor)/(1.0 - spotLight.cutoff ));
	}
	
	return color;
}

